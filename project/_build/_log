### Starting build.
# Target: growth.mli.depends, tags: { package(ANSITerminal), package(oUnit), package(yojson), extension:mli, file:growth.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package ANSITerminal -package yojson -modules growth.mli > growth.mli.depends # cached
# Target: growth.cmi, tags: { package(ANSITerminal), package(oUnit), package(yojson), byte, compile, extension:mli, file:growth.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package ANSITerminal -package yojson -o growth.cmi growth.mli # cached
# Target: growth.ml.depends, tags: { package(ANSITerminal), package(oUnit), package(yojson), extension:ml, file:growth.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package ANSITerminal -package yojson -modules growth.ml > growth.ml.depends # cached
# Target: growth.cmo, tags: { package(ANSITerminal), package(oUnit), package(yojson), byte, compile, extension:cmo, extension:ml, file:growth.cmo, file:growth.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package ANSITerminal -package yojson -o growth.cmo growth.ml # cached
# Target: event.mli.depends, tags: { package(ANSITerminal), package(oUnit), package(yojson), extension:mli, file:event.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package ANSITerminal -package yojson -modules event.mli > event.mli.depends # cached
# Target: founding.mli.depends, tags: { package(ANSITerminal), package(oUnit), package(yojson), extension:mli, file:founding.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package ANSITerminal -package yojson -modules founding.mli > founding.mli.depends # cached
# Target: founding.cmi, tags: { package(ANSITerminal), package(oUnit), package(yojson), byte, compile, extension:mli, file:founding.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package ANSITerminal -package yojson -o founding.cmi founding.mli # cached
# Target: event.cmi, tags: { package(ANSITerminal), package(oUnit), package(yojson), byte, compile, extension:mli, file:event.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package ANSITerminal -package yojson -o event.cmi event.mli # cached
# Target: event.ml.depends, tags: { package(ANSITerminal), package(oUnit), package(yojson), extension:ml, file:event.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package ANSITerminal -package yojson -modules event.ml > event.ml.depends # cached
# Target: event.cmo, tags: { package(ANSITerminal), package(oUnit), package(yojson), byte, compile, extension:cmo, extension:ml, file:event.cmo, file:event.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package ANSITerminal -package yojson -o event.cmo event.ml
+ ocamlfind ocamlc -c -package oUnit -package ANSITerminal -package yojson -o event.cmo event.ml
File "event.ml", line 1:
Error: The implementation event.ml does not match the interface event.cmi:
       The value `update_company' is required but not provided
       File "event.mli", line 23, characters 0-49: Expected declaration
       The value `event_type' is required but not provided
       File "event.mli", line 20, characters 0-32: Expected declaration
       The type `response' is required but not provided
       File "event.mli", line 16, characters 0-13: Expected declaration
       The type `event_type' is required but not provided
       File "event.mli", line 12, characters 0-122: Expected declaration
       The type `employee' is required but not provided
       File "event.mli", line 10, characters 0-13: Expected declaration
       The type `government' is required but not provided
       File "event.mli", line 8, characters 0-15: Expected declaration
       The type `investor' is required but not provided
       File "event.mli", line 6, characters 0-13: Expected declaration
       The type `e' is required but not provided
       File "event.mli", line 4, characters 0-6: Expected declaration
Command exited with code 2.
# Compilation unsuccessful.
